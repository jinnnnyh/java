public class ChildEx {
  public static void main(String[] args) {
    // 부모 클래스 타입의 객체 생성
    // parent 타입 객체 힙에서 불러옴
    Parent parent = new Parent();
    // 부모 객체의 인스턴스 멤버 사용
    // 부모 객체가 가지고 있던 내용을 출력
    parent.method1();
    parent.method2();
//    parent.method3(); 부모 클래스로 자식 클래스 메소드 호출 못함

    System.out.println();

    // 자식 클래스 타입의 객체 생성
    // child 타입 객체 힙에서 불러옴
    Child child = new Child();
    // 자식 객체의 인스턴스 멤버 사용
    child.method1(); // Parent 클래스에서 상속받은 method1 호출
    child.method2(); // Parent 클래스의 상속받은 메소드인 method2을 오버라이딩하여 내용 수정한 method2 호출
    child.method3(); // 자식 클래스의 method3

    System.out.println();

    // 다형성의 효과
    // 부모 클래스 타입의 변수에 자식 클래스 타입의 객체를 대입
    // 부모 클래스 타입의 변수명으로 자식 클래스 타입의 멤버를 호출할 수 있음(ex 오버라이딩 된 멤버) >> 이게 뭐가 좋은거지 ????????????????????
    // 부모 클래스 타입의 멤버만 사용할 수 있음
    // 자식 클래스 타입 전용 멤버는 사용할 수 없음
    // 부모 클래스 타입의 변수로 다양한 자식 클래스 타입의 객체를 실행할 수 있음 >> 이렇게 써야할 이유가 있나??
    // 사용자에게 하나의 사용방법을 제공하고, 결과는 여러가지 결과를 얻을 수 있음

    // 어떤 자식 객체가 저장됐는지 알아야하는거 아닌가 명시적이지 못한것 같음
    // 자식 객체로 사용하는게 나아보이는데.........

    // 부모 클래스 타입의 변수에 자식 클래스 타입의 객체를 대입
    // 따로따로 선언해서 써도 문제없을 것 같은데 이렇게 쓰면 뭐가 좋은거지 ????????????????????
    parent = child;
    // 껍데기는 부모 속은 자식, 껍데기는 부모라 자식 전용 멤버는 사용 X , 오버라이딩된 멤버 ok
    parent.method1();
    // 자식 클래스인 Child 클래스 타입의 객체 멤버인 method1 사용
    // (method1은 이미 상속 받아서 child 객체의 힙에 있는 상태, 이걸 불러와서 쓴다는 말인듯)
    // 부모 클래스 타입이지만 안에 저장된건 자식 클래스 객체이기 때문에 자식 클래스의 힙에서 불러옴
    parent.method2();
    // 자식 클래스인 Child 클래스 타입의 객체 멤버인 method2 사용
//    parent.method3();

  }
}
